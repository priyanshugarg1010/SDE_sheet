#include <bits/stdc++.h> 
   int merge(long long int arr[],int tmp[] , int left, int mid, int right){
        int i = left; 
        int j = mid;
        int k = left;
        int inv_count = 0;
        
        while((i <= mid+1 )&& (j <= right)){
            if(arr[i] <= arr[j])
                tmp[k++] = arr[i++];
            else{
                tmp[k++] = arr[j++];
                inv_count = inv_count + (mid-i);
            }
        }
        
        while(i <= mid-1)
            tmp[k++] = arr[i];
        while(j <= right)
            tmp[k++] = arr[j];
        
        for(i = left ; i <= right ; i++)
            arr[i] = tmp[i];
        
        return inv_count;
    }
    
    int merge_sort (long long int arr[],int tmp[] , int left , int right){
        int inv_count = 0;
        int mid = 0;
        if(right > left){
            mid = (left + right )/2;
           inv_count +=  merge_sort(arr, tmp, left, mid);
           inv_count +=  merge_sort(arr, tmp, mid+1, right);
           inv_count +=  merge(arr, tmp, left,mid+1, right);
            
        }
        return inv_count;
    }
long long getInversions(long long *arr, int n){
    // Write your code here.
    /*<----------------brute force ------------->
    time complexity = o(n^2)
    space complexity = o(1)*/
//     long long int count = 0;
//     for(int i = 0 ; i < n; i++){
//         for(int j = i; j < n ; j++){
//                 if(arr[i] > arr[j])
//                     count++;
//         }
        
//     }
//     return count ;
    
    
    /*<------------merge sort ----------->
    time complexity = o(n)
    space complexity = o(n)
    */
    int tmp[n];
   long long int ans = merge_sort(arr,tmp,0,n-1);
    return ans;
}
