class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
       /*<------------brute force------------->Time Complexity: O(n^2)

Space Complexity: O(1)
*/
        // vector<int> ans;
        // for(int i = 0; i < nums.size(); i++){
        //     int count  = 0;
        //     for(int j = i+1; j < nums.size(); j++){
        //         if(nums[i] == nums[j]) count++;
        //     }
        //     if(count >= nums.size()/3) 
        //         ans.push_back(nums[i]);
        // }
        // return ans;
        
        
        
        /*<----------using hash map------------->
        Time Complexity: O(n)

Space Complexity: O(n)
*/
        // unordered_map<int,int > mp;
//         vector<int> ans;
//         for(auto value : nums){
//             mp[value]++;
//         }
        
//         for(auto value : mp){
//             if(value.second > nums.size()/3) ans.push_back(value.first);
//         }
//         return ans;
        
        
        /*<------------extention boyer moore voting algorithm--------------->
        time complexity = o(n)+O(n)
        space complexity = o(1)*/
        
            int sz = nums.size();
        int num1 = -1, num2 = -2, cnt1 = 0, cnt2 = 0;
        for(int i = 0; i < sz; i++){
            
            if(num1 == nums[i])
                cnt1++;
            else if(num2 == nums[i]) 
                cnt2++;
            else if(cnt1 == 0){
                num1 = nums[i];
                cnt1 = 1;
            }
            else if(cnt2 == 0){
                num2 = nums[i];
                cnt2 = 1;
            }
            else {
                cnt1--;
                cnt2--;
            }
     
            
        }
        
        vector<int> result;
            cnt1 = 0;
            cnt2 =  0;
            for(int i = 0; i < sz; i++){
                if(nums[i] == num1) cnt1++;
                if(nums[i] == num2) cnt2++;
            }
            
            if(cnt1 > sz/3) result.emplace_back(num1);
        if(cnt2 > sz/3) result.emplace_back(num2);
        
        return result;
    }
    
};
