class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        /* <--------------brute force code---------------->
        Time Complexity: O(N^3)
        Space Complexity: O(1) */
//         int n = nums.size();
//         int max_sum = 0;
//         if(n == 1) return nums[0];
        
//         for(int i = 0; i < n; i++){
//             for(int j = i; j < n; j++){
//                 int sum = 0;
                
//                 for(int k = i; k <= j; k++){
//                     sum += nums[k];
//                 }
//                  max_sum = max(sum , max_sum);
//             }
//         }
//         return max_sum;
        
        
        
        /*<-------------------new apporach--------------->*/
//          int n = nums.size();
//         int max_sum = INT_MIN   ;
//         if(n == 1) return nums[0];
        
//         for(int i = 0; i < n; i++){
//                int sum = 0;
//             for(int j = i; j < n; j++){
                
//                 sum += nums[j];
//                 max_sum = max(sum , max_sum);
//             }
//         }
//         return max_sum;   
        
        
        
        
      /*<--------------kadanes  algorithm----------->time complexity = o(n)
      space complexity = o(1)
      */  
        int sum = 0; 
        int max_sum = nums[0];
        for(auto it : nums){
            sum += it; 
            max_sum = max(sum, max_sum);
            if(sum < 0) sum = 0;
        }
        return max_sum;
    }
};
