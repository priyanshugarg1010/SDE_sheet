class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
       
        /*<-------------optimised solution----------->
        Time Complexity: O(NlogN) + O(N)
        Space Complexity: O(N)*/
        // base case when there is no interval
        if(intervals.size() == 0) return intervals;
        sort(intervals.begin(), intervals.end());
        vector<vector<int>> output;
        // inserting the first interval into the result
        output.push_back(intervals[0]);
        
        for(int i = 1; i < intervals.size(); i++){
            //if the intervals are overlaping
            if(output.back()[1] >= intervals[i][0]) output.back()[1] = max(output.back()[1] , intervals[i][1]);
            // else not overlapping
            else output.push_back(intervals[i]);
        }
        return output;
    }
};
