class Solution {
     int merge(vector<int> &nums, int low , int mid , int high){
            int j = mid+1;
            int total = 0;
            for(int i = low; i <= mid; i++){
                while(j <= high && nums[i] > nums[j] * 2LL){
                    j++;
                }
                total += (j- (mid+1));
            }
            
            
            vector<int> ans;
            int left = low, right = mid+1;
            while(left <= mid && right <= high){
                if(nums[left] <= nums[right] ) 
                    ans.push_back(nums[left++]);
                else 
                    ans.push_back(nums[right++]);
            }            
            
            while(left <= mid)
                ans.push_back(nums[left++]);
            while(right <= high)
                ans.push_back(nums[right++]);
            
            for(int i = low ; i <= high; i++){
                nums[i]= ans[i-low];
            }
            
            return total;
        }
        
        int merge_sort (vector<int> &nums, int low , int high){
            if(low >= high) return 0;
            int count = 0;
            int  mid = (low + high ) / 2;
            count = merge_sort(nums, low, mid);
            count += merge_sort(nums, mid+1, high);
            count += merge(nums, low, mid, high);
            return count;
        }
public:
    int reversePairs(vector<int>& nums) {
        /*<-----------brute force code-------------->*/
        // int n = nums.size();
        // int count = 0;
        // for(int i = 0; i < n; i++){
        //     for(int j = i+1; j < n; j++){
        //         if(nums[i] > 1LL*nums[j]*2) count++;
        //     }
        // }
        // return count ;
        
        
        /*------------merge sort method-----------*/
        
       return merge_sort(nums, 0 , nums.size()-1);
    }
};
