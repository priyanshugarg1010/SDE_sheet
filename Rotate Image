class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        
         
        /*<-------------changing corners---------->*/
        
        int tmp;
        int n = matrix.size();
        for(int i = 0; i < (n+1)/2; i++){
            for(int j = 0; j < n/2; j++){
                tmp = matrix[n-j-1][i];
                matrix[n-1-j][i] = matrix[n-1-i][n-1-j];
                matrix[n-1-i][n-1-j] = matrix[j][n-1-i]; 
                matrix[j][n-1-i] = matrix[i][j];
                matrix[i][j] = tmp;
            }
        }
        
        /*<--------------after tarnsposing reverse the rows----------->
        Time Complexity: O(N*N) 

Space Complexity: O(N*N*/
//         int n = matrix.size();
//         for(int i = 0; i < n; i++)
//             for(int j = 0; j < i; j++)
//                 swap(matrix[i][j], matrix[j][i]);
        
//         for(int i = 0; i < n; i++)
//             reverse(matrix[i].begin(), matrix[i].end());
        
       
        
    }
};
