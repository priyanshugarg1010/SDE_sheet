class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        /*<-------brute force----------->*/
//         for(vector<int> row : matrix){
//             for(int value : row){
//                 if(value == target) return true;
                
//             }
//         }
//         return false;
        
        /*<----------binary search----------->*/
       // for(vector<int > row : matrix){
       //     if(binary_search(row.begin(), row.end(), target)) return true;
       // }
       //  return false;
        
        /*<--------------optimal---------->
        not working in the [[1,3]] case */
//         int i = 0, j = matrix.size()-1;
//         while(i < matrix.size() && j >= 0){
//             if(matrix[i][j] == target) 
//                 return true;

//                 if(matrix[i][j] > target)
//                     j--;
//                 else
//                     i++;
            
//         }
//         return false;
        
        
        /*<--------------most optimal approach---------->
        Time complexity: O(log(m*n))

Space complexity: O(1)*/
        
        if(!matrix.size()) return false;
        
        int n = matrix.size();
        int m = matrix[0].size();
        
        int low = 0;
        int high = (n*m)-1;
        
        while(low <= high){
            int mid = (low +( high - low )/2) ;
            if(matrix[mid/m][mid%m] == target) return true;
            else if(matrix[mid/m][mid%m] < target ) low = mid + 1;
            else high = mid - 1;
        }
        return false;
    }
};
