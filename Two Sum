class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        /*------------brute force code ---------------
        time complexity = o(n^2)
        space complexity = o(1)*/
        
       // vector<int> ans;
       //  for(int i = 0; i < nums.size(); i++){
       //      int othernum = target - nums[i];
       //      for(int j = i+1; j < nums.size(); j++){
       //          if(othernum == nums[j]) {
       //              ans.emplace_back(i);
       //              ans.emplace_back(j);
       //          }
       //      }
       //  }
       //  return ans;
        
        
        
        /*-----------------hash map---------------------
        time complexity = o(n)
        space complexity = o(n)*/
        
        vector<int> result;
        unordered_map<int, int> valuemp;
        for(int i = 0; i < nums.size(); i++){
            if(valuemp.find(target - nums[i]) != valuemp.end()){
                result.push_back(valuemp[target - nums[i]]);
                result.push_back(i);
                        return result;

            }
            valuemp[nums[i]] = i;
            
                
        }
        return result;
        
    }
};
